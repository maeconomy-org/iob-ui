'use client'

import { useEffect, useState } from 'react'
import { ChevronRight, FileText, MoreHorizontal, Search, X } from 'lucide-react'

import {
  Button,
  ScrollArea,
  ColumnPagination,
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  Input,
} from '@/components/ui'

import {
  useColumnPagination,
  useColumnSelection,
  useUnifiedDelete,
  useColumnSearch,
} from '@/hooks'
import { DeleteConfirmationDialog } from '@/components/modals'

// Define interfaces for our data
interface Property {
  uuid: string
  key: string
  value?: string
  values?: { value: string }[]
}

interface ObjectItem {
  uuid: string
  name: string
  modelUuid?: string
  modelName?: string
  modelVersion?: string
  properties?: Property[]
  children?: ObjectItem[]
  hasChildren?: boolean
  childCount?: number
  createdAt: string
  updatedAt: string
  files?: any[]
  softDeleted?: boolean
  softDeletedAt?: string
  softDeleteBy?: string
  description?: string
}

interface ObjectColumnsViewProps {
  data: any[]
  loading?: boolean
  fetching?: boolean
  loadChildren?: (
    parentUUID: string,
    page?: number
  ) => Promise<{ items: any[]; totalPages: number; totalItems: number }>
  // Root column pagination
  rootPagination?: {
    currentPage: number
    totalPages: number
    totalItems: number
    onPageChange: (page: number) => void
  }
  onViewObject?: (object: any) => void
  onEditObject?: (object: any) => void
}

// Column view component for a list of objects
function ObjectColumn({
  items,
  selectedId,
  isLoading = false,
  pagination,
  onSelect,
  onShowDetails,
  onEdit,
  onDelete,
  searchTerm = '',
  onSearchChange,
  columnTitle = 'Objects',
}: {
  items: ObjectItem[]
  selectedId: string | null
  isLoading?: boolean
  pagination?: {
    currentPage: number
    totalPages: number
    totalItems: number
    onPageChange: (page: number) => void
  }
  onSelect: (item: ObjectItem) => void
  onShowDetails: (item: ObjectItem) => void
  onEdit: (item: ObjectItem) => void
  onDelete: (item: ObjectItem) => void
  searchTerm?: string
  onSearchChange?: (search: string) => void
  columnTitle?: string
}) {
  // Get icon based on object type
  const getIcon = (item: ObjectItem) => {
    return <FileText size={16} />
  }

  // For server-side search, we'll filter on the server
  // For now, keep client-side filtering until server-side search is implemented
  const filteredItems = items.filter((item) => {
    if (!searchTerm.trim()) return true
    const searchLower = searchTerm.toLowerCase()
    return (
      item.name?.toLowerCase().includes(searchLower) ||
      item.description?.toLowerCase().includes(searchLower) ||
      item.uuid?.toLowerCase().includes(searchLower)
    )
  })

  const clearSearch = () => {
    onSearchChange?.('')
  }

  return (
    <div className="flex-1 min-w-[250px] max-w-[300px] h-full border-r overflow-hidden flex flex-col">
      {/* Column Header */}
      <div className="border-b bg-muted/20">
        <div className="p-2">
          <div className="flex items-center justify-between mb-2">
            <h3 className="text-sm font-medium">{columnTitle}</h3>
            <div className="text-xs text-muted-foreground">
              {pagination
                ? searchTerm
                  ? // During search: show filtered count vs total
                    `${filteredItems.length} of ${pagination.totalItems} items`
                  : // Normal: show current page items vs total
                    `${filteredItems.length} of ${pagination.totalItems} items`
                : `${filteredItems.length} items`}
            </div>
          </div>

          {/* Search Input */}
          {onSearchChange && (
            <div className="relative">
              <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-3 w-3 text-muted-foreground" />
              <Input
                placeholder="Search in column..."
                value={searchTerm}
                onChange={(e) => onSearchChange(e.target.value)}
                className="h-7 pl-7 pr-7 text-xs"
              />
              {searchTerm && (
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={clearSearch}
                  className="absolute right-1 top-1/2 transform -translate-y-1/2 h-5 w-5 p-0"
                >
                  <X className="h-3 w-3" />
                </Button>
              )}
            </div>
          )}
        </div>

        {/* Compact Pagination */}
        {pagination && pagination.totalPages > 1 && (
          <div className="pb-2">
            <ColumnPagination
              currentPage={pagination.currentPage}
              totalPages={pagination.totalPages}
              totalItems={pagination.totalItems}
              onPageChange={pagination.onPageChange}
              loading={isLoading}
            />
          </div>
        )}
      </div>

      <ScrollArea className="flex-1">
        <div className="px-1 py-2">
          {isLoading ? (
            <div className="flex items-center justify-center p-8">
              <div className="h-6 w-6 animate-spin rounded-full border-2 border-primary border-t-transparent mr-2"></div>
              <span className="text-sm text-muted-foreground">
                Loading children...
              </span>
            </div>
          ) : filteredItems.length === 0 ? (
            <div className="flex items-center justify-center p-8 text-center">
              <div className="text-sm text-muted-foreground">
                {searchTerm
                  ? 'No items match your search'
                  : 'No items in this column'}
              </div>
            </div>
          ) : (
            filteredItems.map((item) => {
              const isSelected = item.uuid === selectedId
              const hasChildren =
                item.hasChildren || (item.children && item.children.length > 0)
              const model = item.modelUuid
                ? { name: item.modelName, version: item.modelVersion }
                : null

              return (
                <div
                  key={item.uuid}
                  className={`
                  flex items-center justify-between p-2 rounded-md cursor-pointer mb-1
                  ${isSelected ? 'bg-primary/10' : 'hover:bg-muted/50'}
                `}
                  onClick={() => onSelect(item)}
                >
                  <div className="flex items-center flex-1 min-w-0">
                    <div className="rounded-full w-5 h-5 flex items-center justify-center bg-blue-50 text-blue-600 mr-2 shrink-0">
                      {getIcon(item)}
                    </div>

                    <div className="flex flex-col min-w-0">
                      <div className="flex items-center gap-2">
                        <span className="text-sm font-medium truncate">
                          {item.name}
                        </span>
                        {(item.hasChildren || (item.childCount ?? 0) > 0) && (
                          <span className="inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-blue-50 text-blue-700 shrink-0">
                            üìÅ {item.childCount || item.children?.length || 0}
                          </span>
                        )}
                      </div>

                      {model && (
                        <span className="text-xs text-muted-foreground truncate">
                          {model.name}
                        </span>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center">
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6 text-muted-foreground"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => onShowDetails(item)}>
                          View Details
                        </DropdownMenuItem>
                        <DropdownMenuItem
                          onClick={() => onDelete(item)}
                          className="text-destructive"
                        >
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>

                    {hasChildren && (
                      <ChevronRight className="h-4 w-4 text-muted-foreground ml-1" />
                    )}
                  </div>
                </div>
              )
            })
          )}
        </div>
      </ScrollArea>
    </div>
  )
}

export function ObjectColumnsView({
  data,
  loading = false,
  fetching = false,
  loadChildren,
  rootPagination,
  onViewObject,
  onEditObject,
}: ObjectColumnsViewProps) {
  // Use custom hooks to manage complex logic
  const {
    columnPagination,
    handleColumnPageChange,
    setPaginationForColumn,
    removePaginationForColumn,
    clearAllPagination,
    getPaginationForColumn,
    isColumnLoading,
  } = useColumnPagination({ loadChildren })

  const {
    columns,
    selectedIds,
    path,
    handleSelectItem,
    updateColumnData,
    initializeWithData,
  } = useColumnSelection({
    loadChildren,
    onPaginationSet: setPaginationForColumn,
    onPaginationRemove: removePaginationForColumn,
    onLoadingSet: (columnIndex: number, loading: boolean) => {
      // This will be handled by the pagination hook
    },
  })

  // Unified delete hook
  const {
    isDeleteModalOpen,
    objectToDelete,
    handleDelete,
    handleDeleteConfirm,
    handleDeleteCancel,
  } = useUnifiedDelete()

  // Server-side column search with debouncing (only if loadChildren is available)
  const searchEnabled = !!loadChildren
  const {
    columnSearchTerms = {},
    handleColumnSearchChange: handleSearchChange = () => {},
    isColumnSearching = () => false,
    getColumnSearchTerm = () => '',
  } = searchEnabled
    ? useColumnSearch({
        loadChildren: loadChildren!,
        onDataUpdate: updateColumnData,
        onPaginationUpdate: setPaginationForColumn,
      })
    : {}

  // Fallback client-side search state for root column
  const [rootSearchTerm, setRootSearchTerm] = useState('')

  // Calculate root column pagination based on filtered results
  const getRootColumnPagination = () => {
    if (!rootPagination) return null

    const rootItems = columns[0] || []
    const filteredCount = rootSearchTerm
      ? rootItems.filter((item: any) => {
          const searchLower = rootSearchTerm.toLowerCase()
          return (
            item.name?.toLowerCase().includes(searchLower) ||
            item.description?.toLowerCase().includes(searchLower) ||
            item.uuid?.toLowerCase().includes(searchLower)
          )
        }).length
      : rootItems.length

    // When searching, show filtered results pagination
    if (rootSearchTerm) {
      return {
        currentPage: 1,
        totalPages: 1,
        totalItems: filteredCount,
        onPageChange: () => {}, // No pagination for filtered client-side results
      }
    }

    // Normal pagination
    return rootPagination
  }

  // Wrapper to handle search with parent context
  const handleColumnSearchChange = (
    columnIndex: number,
    searchTerm: string
  ) => {
    if (columnIndex === 0) {
      // Root column uses client-side search for now
      setRootSearchTerm(searchTerm)
    } else {
      // Child columns use server-side search
      const parentItem = path[columnIndex - 1]
      if (parentItem && searchEnabled) {
        handleSearchChange(columnIndex, searchTerm, parentItem.uuid)
      }
    }
  }

  // Get search term for a column
  const getSearchTermForColumn = (columnIndex: number) => {
    if (columnIndex === 0) {
      return rootSearchTerm
    }
    return searchEnabled ? getColumnSearchTerm(columnIndex) : ''
  }

  // Check if a column is loading/searching
  const isColumnLoadingOrSearching = (columnIndex: number) => {
    if (columnIndex === 0) {
      return fetching
    }
    return (
      isColumnLoading(columnIndex) ||
      (searchEnabled && isColumnSearching(columnIndex))
    )
  }

  // Update root column when data changes
  useEffect(() => {
    if (data && data.length > 0) {
      initializeWithData(data)
      clearAllPagination()
    }
  }, [data]) // Only depend on data, not the functions

  // Simple handler functions (delegating to hooks)
  const handleShowDetails = (item: ObjectItem) => {
    if (onViewObject) {
      onViewObject(item)
    }
  }

  const handleEdit = (item: ObjectItem) => {
    if (onEditObject) {
      onEditObject(item)
    }
  }

  // Create a wrapper for column page change that provides the correct parent UUID
  const handleColumnPageChangeWrapper = async (
    columnIndex: number,
    newPage: number
  ) => {
    const parentItem = path[columnIndex - 1]
    if (parentItem) {
      await handleColumnPageChange(
        columnIndex,
        newPage,
        parentItem.uuid,
        updateColumnData
      )
    }
  }

  return (
    <>
      <div className="flex flex-col h-[calc(100vh-180px)]">
        {/* Columns container */}
        <div className="border rounded-md overflow-hidden flex-1">
          <div className="flex h-full overflow-x-auto">
            {columns.map((items, index) => {
              // Root column (index 0) uses special pagination that accounts for search
              const isRootColumn = index === 0
              const paginationInfo = isRootColumn
                ? getRootColumnPagination()
                : getPaginationForColumn(index)

              return (
                <ObjectColumn
                  key={index}
                  items={items}
                  selectedId={selectedIds[index] || null}
                  isLoading={isColumnLoadingOrSearching(index)}
                  pagination={
                    paginationInfo
                      ? {
                          currentPage: paginationInfo.currentPage,
                          totalPages: paginationInfo.totalPages,
                          totalItems: paginationInfo.totalItems,
                          onPageChange: (page) => {
                            if (isRootColumn) {
                              // Root column uses its own onPageChange function
                              ;(paginationInfo as any).onPageChange(page)
                            } else {
                              // Child columns use the column page change handler
                              handleColumnPageChangeWrapper(index, page)
                            }
                          },
                        }
                      : undefined
                  }
                  onSelect={(item) => handleSelectItem(item, index)}
                  onShowDetails={handleShowDetails}
                  onEdit={handleEdit}
                  onDelete={(item) =>
                    handleDelete({ uuid: item.uuid, name: item.name })
                  }
                  searchTerm={getSearchTermForColumn(index)}
                  onSearchChange={(searchTerm) =>
                    handleColumnSearchChange(index, searchTerm)
                  }
                  columnTitle={
                    index === 0 ? 'Root Objects' : `Level ${index + 1}`
                  }
                />
              )
            })}

            {/* Show loading column for children being fetched */}
            {Array.from(columnPagination.keys())
              .filter(isColumnLoading)
              .map((columnIndex) => (
                <ObjectColumn
                  key={`loading-${columnIndex}`}
                  items={[]}
                  selectedId={null}
                  isLoading={true}
                  onSelect={() => {}}
                  onShowDetails={() => {}}
                  onEdit={() => {}}
                  onDelete={() => {}}
                  searchTerm=""
                  onSearchChange={() => {}}
                  columnTitle="Loading..."
                />
              ))}

            {/* Empty state for when no columns have content */}
            {columns.length === 0 && (
              <div className="flex-1 flex items-center justify-center p-8 text-center text-muted-foreground">
                <div>
                  <FileText className="h-10 w-10 mx-auto mb-4 text-muted-foreground/50" />
                  <h3 className="text-lg font-medium mb-2">No Objects Found</h3>
                  <p className="text-sm">
                    Try refining your search or adding new objects
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Unified Delete Confirmation Dialog */}
      {isDeleteModalOpen && objectToDelete && (
        <DeleteConfirmationDialog
          open={isDeleteModalOpen}
          onOpenChange={handleDeleteCancel}
          objectName={objectToDelete.name}
          onDelete={handleDeleteConfirm}
        />
      )}
    </>
  )
}
