import { useState, useEffect } from 'react'
import { toast } from 'sonner'
import { useAddresses } from '@/hooks/api'

export interface AddressData {
  uuid?: string
  fullAddress: string
  street?: string
  houseNumber?: string
  city?: string
  postalCode?: string
  country?: string
  state?: string
  district?: string
}

export interface UseAddressManagementProps {
  initialAddressInfo?: AddressData | null
  objectUuid?: string
}

export interface UseAddressManagementReturn {
  addressData: AddressData
  editedAddressData: AddressData
  setEditedAddressData: (data: AddressData) => void
  saveAddress: () => Promise<void>
  hasAddressChanged: boolean
}

/**
 * Hook for managing address data and operations
 */
export function useAddressManagement({
  initialAddressInfo,
  objectUuid,
}: UseAddressManagementProps): UseAddressManagementReturn {
  const { useCreateAddress, useUpdateAddress } = useAddresses()
  const createAddressMutation = useCreateAddress()
  const updateAddressMutation = useUpdateAddress()

  // Address state - matches actual API response structure
  const [addressData, setAddressData] = useState<AddressData>({
    fullAddress: '',
  })

  const [editedAddressData, setEditedAddressData] = useState<AddressData>({
    fullAddress: '',
  })

  // Update address data from API response when available
  useEffect(() => {
    if (initialAddressInfo) {
      setAddressData({ ...initialAddressInfo })
      setEditedAddressData({ ...initialAddressInfo })
    }
  }, [initialAddressInfo])

  // Check if address has changed
  const hasAddressChanged =
    editedAddressData.fullAddress !== addressData.fullAddress ||
    editedAddressData.street !== addressData.street ||
    editedAddressData.houseNumber !== addressData.houseNumber ||
    editedAddressData.city !== addressData.city ||
    editedAddressData.postalCode !== addressData.postalCode ||
    editedAddressData.country !== addressData.country ||
    editedAddressData.state !== addressData.state ||
    editedAddressData.district !== addressData.district

  const saveAddress = async (): Promise<void> => {
    console.log('editedAddressData', editedAddressData)
    console.log('initialAddressInfo', initialAddressInfo)
    if (!editedAddressData) {
      throw new Error('Missing required data for address update')
    }

    if (!hasAddressChanged) {
      // No changes to save
      return
    }

    try {
      setAddressData({ ...editedAddressData })

      const addressPayload = {
        fullAddress: editedAddressData.fullAddress,
        street: editedAddressData.street,
        houseNumber: editedAddressData.houseNumber,
        city: editedAddressData.city,
        postalCode: editedAddressData.postalCode,
        country: editedAddressData.country,
        state: editedAddressData.state,
        district: editedAddressData.district,
      }

      if (initialAddressInfo?.uuid) {
        // Update existing address
        await updateAddressMutation.mutateAsync({
          ...addressPayload,
          uuid: initialAddressInfo.uuid,
        })
      } else if (objectUuid) {
        // Create new address (UUID will be generated by the API)
        await createAddressMutation.mutateAsync({
          objectUuid,
          address: addressPayload as any,
        })
      }

      toast.success('Address updated successfully')
    } catch (error) {
      console.error('Error in address update process:', error)
      toast.error('Failed to process address updates')
      throw error
    }
  }

  return {
    addressData,
    editedAddressData,
    setEditedAddressData,
    saveAddress,
    hasAddressChanged,
  }
}
